*-----------------------------------------------------------------------------*
* <Rating>-58</Rating>
*Create by Galuh.G.P April 2013
*for including locked amt,minimum amt and cleared amt in enquiry .

*fix NULL USED variable. Rizky 20131112
*duplicate routine from IDI.AT.ISO.FMT.BAL.RTN for balance enquiry sc
*-----------------------------------------------------------------------------
    SUBROUTINE IDI.AT.ISO.FMT.BAL.SC.RTN(R.ACCT,WRK.BAL,AVAIL.BAL,BALANCE.FORMATTED)

    $INCLUDE T24.BP I_COMMON
    $INCLUDE T24.BP I_EQUATE
    $INCLUDE T24.BP I_F.ACCOUNT
    $INCLUDE T24.BP I_F.ACCOUNT.CLASS
    $INCLUDE T24.BP I_F.CURRENCY
    $INCLUDE ATM.BP I_AT.ISO.COMMON
    $INCLUDE TEANA.BP I_F.IDIH.AC.LOCKED.AMT
    $INCLUDE T24.BP I_F.ACCT.GROUP.CONDITION
    $INCLUDE ATM.BP I_AT.ISO.COMMON
*------------------------------------------------------------------------------------------*

    GOSUB INITIALISE
    GOSUB PROCESS
    RETURN

*------------------------------------------------------------------------------------------*
INITIALISE:
*--------*

    FN.ACCOUNT.CLASS = 'F.ACCOUNT.CLASS'
    F.ACCOUNT.CLASS = ''
    CALL OPF(FN.ACCOUNT.CLASS,F.ACCOUNT.CLASS)
*
    FN.CURRENCY = 'F.CURRENCY'
    F.CURRENCY = ''
    CALL OPF(FN.CURRENCY,F.CURRENCY)
*
    CALL CACHE.READ(FN.ACCOUNT.CLASS,'SAVINGS',R.ACCT.CLASS,ER.AC.CLASS)
    SAV.ACCT.CATEG = R.ACCT.CLASS<AC.CLS.CATEGORY>

    FN.LOCK.AMT = 'F.IDIH.AC.LOCKED.AMT'
    F.LOCK.AMT = ''
    CALL OPF(FN.LOCK.AMT,F.LOCK.AMT)

    FN.ACCT.GRP.COND="F.ACCT.GROUP.CONDITION"
    F.ACCT.GRP.COND=""
    CALL OPF(FN.ACCT.GRP.COND,F.ACCT.GRP.COND)

*fix notification NULL USED variable
    U.LOCK.AMT = 0
**end fix

    RETURN          ;*From Initialise

*------------------------------------------------------------------------------------------*
PROCESS:
*------------------------------------------------------------------------------------------*


    CCY.CODE = R.ACCT<AC.CURRENCY>
    CALL CACHE.READ(FN.CURRENCY,CCY.CODE,R.CCY,ER.CCY)
    NUM.CCY = R.CCY<EB.CUR.NUMERIC.CCY.CODE>
    NUM.CCY = FMT(NUM.CCY,'R%3')


    Y.AC.CATEG = R.ACCT<AC.CATEGORY>

    IF Y.AC.CATEG[1,2] EQ "10" THEN     ;* Current account
        ACC.TYPE='20'
    END ELSE
        IF Y.AC.CATEG[1,2] EQ "60" THEN ;* Saving account
            ACC.TYPE='10'
        END ELSE
            ACC.TYPE='00'
        END         ;* for ACC.TYPE='30' not include to this condition because BSM still not use credit card
    END

    AMT.TYPE.AVAIL='02'
    WRK.BAL = R.ACCT<AC.WORKING.BALANCE>

    CALL AT.CALC.AVAIL.BALANCE(R.ACCT,WRK.BAL,AVAIL.BAL)

    IF AVAIL.BAL LE '0' THEN
        AVAIL.BAL.SIGN ='D'
    END ELSE
        AVAIL.BAL.SIGN ='C'
    END

    AVAIL.BAL = ABS(AVAIL.BAL)

    BALANCE.TO.FMT = AVAIL.BAL

    BALANCE.FMT1 = FIELD(BALANCE.TO.FMT,'.',1)
    BALANCE.FMT2 = FIELD(BALANCE.TO.FMT,'.',2)
    BALANCE.FMT1 = FMT(BALANCE.FMT1,'R%10')
    BALANCE.FMT2 = FMT(BALANCE.FMT2,'L%2')
    BALANCE.FMT = BALANCE.FMT1:BALANCE.FMT2

*    BALANCE.FMT=BALANCE.FMT1
    AVAIL.BAL = BALANCE.FMT


    GOSUB GET.LOCKED.AMT

    GOSUB GET.MIN.AMT

    GOSUB GET.TOTAL.AMT

*    BALANCE.FORMATTED  =ACC.TYPE:AMT.TYPE.AVAIL:NUM.CCY:AVAIL.BAL.SIGN:AVAIL.BAL
*    BALANCE.FORMATTED :=ACC.TYPE:AMT.TYPE.LCK:NUM.CCY:U.LOCK.AMT.SIGN:LOCK.BAL
*    BALANCE.FORMATTED :=ACC.TYPE:AMT.TYPE.MIN:NUM.CCY:ACCT.MIN.BAL.SIGN:MIN.BAL
    BALANCE.FORMATTED :=ACC.TYPE:AMT.TYPE.TOTAL:NUM.CCY:TOTAL.AMT.SIGN:TOTAL.BAL

*-------------------------------------------------------------------------------------------------------------------------
*--------------------------------------------------------------------------------------------------------------------------
GET.LOCKED.AMT:
    AMT.TYPE.LCK = '17'

    SEL.CMD = "SELECT ":FN.LOCK.AMT
    SEL.CMD := " WITH ACCOUNT EQ ":AT$Y.ACCT.NO
    CALL EB.READLIST(SEL.CMD,SEL.LIST,"",SEL.CNT,SEL.ERR)

    LOOP
        REMOVE Y.ID FROM SEL.LIST SETTING POS
    WHILE Y.ID:POS
        CALL F.READ(FN.LOCK.AMT,Y.ID,R.AC.LOCKED.EVENT,F.LOCK.AMT,ERR1)
        Y.TODATE = R.AC.LOCKED.EVENT<ACLOCK.TO.DATE>
        IF Y.TODATE GE TODAY OR Y.TODATE EQ '' THEN
            U.LOCK.AMT += R.AC.LOCKED.EVENT<ACLOCK.AMOUNT>
        END
    REPEAT

    IF U.LOCK.AMT LE '0' THEN
        U.LOCK.AMT.SIGN ='D'
    END ELSE
        U.LOCK.AMT.SIGN ='C'
    END

    LOCK.FMT1 = FIELD(U.LOCK.AMT,'.',1)
    LOCK.FMT2 = FIELD(U.LOCK.AMT,'.',2)
    LOCK.FMT1 = FMT(LOCK.FMT1,'R%10')
    LOCK.FMT2 = FMT(LOCK.FMT2,'L%2')
    LOCK.FMT = LOCK.FMT1:LOCK.FMT2

    LOCK.BAL = LOCK.FMT
    RETURN
*--------------------------------------------------------------------------------------------------------------------------
GET.MIN.AMT:
    AMT.TYPE.MIN = '16'
    GRP.COND=R.ACCT<AC.CONDITION.GROUP>
    CCY.CODE = R.ACCT<AC.CURRENCY>
    ACCT.GRP.COND.ID=GRP.COND:CCY.CODE
    CALL F.READ(FN.ACCT.GRP.COND,ACCT.GRP.COND.ID,R.GRP.COND,F.ACCT.GRP.COND,ERR.GRP)
    ACCT.MIN.BAL=R.GRP.COND<ACCT.GRP.MINIMUM.BAL>

    IF ACCT.MIN.BAL LE '0' THEN
        ACCT.MIN.BAL.SIGN ='D'
    END ELSE
        ACCT.MIN.BAL.SIGN ='C'
    END

    MIN.FMT1 = FIELD(ACCT.MIN.BAL,'.',1)
    MIN.FMT2 = FIELD(ACCT.MIN.BAL,'.',2)
    MIN.FMT1 = FMT(MIN.FMT1,'R%10')
    MIN.FMT2 = FMT(MIN.FMT2,'L%2')
    MIN.FMT = MIN.FMT1:MIN.FMT2

    MIN.BAL = MIN.FMT
    RETURN
*--------------------------------------------------------------------------------------------------------------------------
GET.TOTAL.AMT:
    AMT.TYPE.TOTAL = '01'
    TOTAL.AMT = R.ACCT<AC.ONLINE.CLEARED.BAL>

    IF TOTAL.AMT LE '0' THEN
        TOTAL.AMT.SIGN ='D'
    END ELSE
        TOTAL.AMT.SIGN ='C'
    END

    TOTAL.FMT1 = FIELD(TOTAL.AMT,'.',1)
    TOTAL.FMT2 = FIELD(TOTAL.AMT,'.',2)
    TOTAL.FMT1 = FMT(TOTAL.FMT1,'R%10')
    TOTAL.FMT2 = FMT(TOTAL.FMT2,'L%2')
    TOTAL.FMT = TOTAL.FMT1:TOTAL.FMT2

    TOTAL.BAL = TOTAL.FMT
    RETURN
*--------------------------------------------------------------------------------------------------------------------------
    RETURN          ;*From process
END




